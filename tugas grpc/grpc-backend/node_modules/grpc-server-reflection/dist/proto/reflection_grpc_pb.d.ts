// package: grpc.reflection.v1alpha
// file: proto/reflection.proto

/* tslint:disable */
/* eslint-disable */

import * as grpc from "@grpc/grpc-js";
import * as proto_reflection_pb from "../proto/reflection_pb";

interface IServerReflectionService extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
    serverReflectionInfo: IServerReflectionService_IServerReflectionInfo;
}

interface IServerReflectionService_IServerReflectionInfo extends grpc.MethodDefinition<proto_reflection_pb.ServerReflectionRequest, proto_reflection_pb.ServerReflectionResponse> {
    path: "/grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo";
    requestStream: true;
    responseStream: true;
    requestSerialize: grpc.serialize<proto_reflection_pb.ServerReflectionRequest>;
    requestDeserialize: grpc.deserialize<proto_reflection_pb.ServerReflectionRequest>;
    responseSerialize: grpc.serialize<proto_reflection_pb.ServerReflectionResponse>;
    responseDeserialize: grpc.deserialize<proto_reflection_pb.ServerReflectionResponse>;
}

export const ServerReflectionService: IServerReflectionService;

export interface IServerReflectionServer extends grpc.UntypedServiceImplementation {
    serverReflectionInfo: grpc.handleBidiStreamingCall<proto_reflection_pb.ServerReflectionRequest, proto_reflection_pb.ServerReflectionResponse>;
}

export interface IServerReflectionClient {
    serverReflectionInfo(): grpc.ClientDuplexStream<proto_reflection_pb.ServerReflectionRequest, proto_reflection_pb.ServerReflectionResponse>;
    serverReflectionInfo(options: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<proto_reflection_pb.ServerReflectionRequest, proto_reflection_pb.ServerReflectionResponse>;
    serverReflectionInfo(metadata: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<proto_reflection_pb.ServerReflectionRequest, proto_reflection_pb.ServerReflectionResponse>;
}

export class ServerReflectionClient extends grpc.Client implements IServerReflectionClient {
    constructor(address: string, credentials: grpc.ChannelCredentials, options?: Partial<grpc.ClientOptions>);
    public serverReflectionInfo(options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<proto_reflection_pb.ServerReflectionRequest, proto_reflection_pb.ServerReflectionResponse>;
    public serverReflectionInfo(metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<proto_reflection_pb.ServerReflectionRequest, proto_reflection_pb.ServerReflectionResponse>;
}
